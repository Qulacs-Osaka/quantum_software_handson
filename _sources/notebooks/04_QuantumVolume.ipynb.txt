{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install qulacs\n",
    "#!pip install matplotlib\n",
    "#!pip install numpy\n",
    "#!pip install scipy\n",
    "#!pip install tqdm\n",
    "\n",
    "from utility import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tqdm\n",
    "import numpy as np\n",
    "import time \n",
    "import random\n",
    "from qulacs import QuantumState\n",
    "from qulacs import QuantumCircuit\n",
    "from qulacs.gate import DenseMatrix,RandomUnitary,DepolarizingNoise\n",
    "from qulacs.circuit import QuantumCircuitOptimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ランダム量子回路と量子ボリューム\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ランダムな量子状態の確立分布はどのようになるかをまず確認しよう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYEAAAD4CAYAAAAKA1qZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3de3hc9X3n8fdXkkd362L5qotlI2MwJGBQzKVhS9KQOAmO86R0a0I2JBD8pFma3faPLqTdJ092/3C67XYbChviBErIbkxYytOY1JRtINTpxiU2hICJsS0LsMaWLV90te7Sd/+YIzESIyE0Mxodzef1PHpmzm/OnPM9PvD7zu9yzjF3R0REslNOpgMQEZHMURIQEcliSgIiIllMSUBEJIspCYiIZLG8TAfwXlRVVXl9fX2mwxARCZUXX3zxrLsvTfRZqJJAfX09Bw4cyHQYIiKhYmZvTfWZuoNERLJYKJKAmW0xs52dnZ2ZDkVEZEEJRRJw96fcfXtZWVmmQxERWVBCkQRERCQ9lARERLKYkoCISBYLRRLQwLCISHqEIgloYFhEstmj+97kxy+fSMu2Q5EERESy2Q9fOM6eV1vTsm0lARGRec4dDEvLtpUERETmOSd9T4DMaBIwsxvN7Odm9qCZ3ZjJWERE5jNLT0Ng9knAzB42szYzOzipfLOZHTazJjO7510240APUABEZxuLiMhC5p6+JJDMXUQfAe4HHh0rMLNc4AHgJmKV+n4z2w3kAjsmff8O4Ofu/s9mthz4K+C2JOIREVmw0jUmMOsk4O57zax+UvEmoMndmwHM7DFgq7vvAG6eZnPtQH6iD8xsO7AdoK6ubrbhioiE1vCok5szz5LAFKqBlrjlKHDNVCub2WeAjwHlxFoV7+DuO82sFdgSiUSuTmGsIiKh0DMwTHF+eh7/kuqtJkpVUw5ru/uTwJMpjkFEZEHp6R+mJD83LdtO9eygKFAbt1wDnEx2o7piWESy1cio0zc0kraWQKqTwH5gnZmtMbMIsA3YnexGde8gEclWrZ19ACwtTThsmrRkpojuAvYB680samZ3uvswcDfwDHAIeNzdX0s2SLUERCRb/eLYOQDeV52e+i+Z2UG3TlG+B9gz64gSMLMtwJaGhoZUblZEZN774QvHaVhWkrYkEIrbRqglICLZaM+rrbzc0sHnrqnD0nS1WCiSgMYERCTb/N/XTvFHP3qZK2vL+ew1q9O2n1AkAbUERCRb9A2O8BfPvM6X/9eLXLKilIe/8AEieemrqtMz5yjFNCYgIgtd/9AIf/dSlPufa6K1s59brq7hv2y9jKJIeqvpUCQBd38KeKqxsfGuTMciIpJKx8/18sSLLeza38KZ7gGuqC3nW9s2smlN5ZzsPxRJQERkoRgYHuHl4x3saz7H84fP8HJLB2bw2xcv5a4b1nL9RUvSNgiciJKAiEgaDQ6P8kq0g33HzrGv+RwvvtXOwPAoZrG5/3+yeT1br6ymurwwI/GFIgloTEBEwmJ4ZJRXT3Syr/kc+46d48Cb7fQNjQBw6crF3HbNaq67aAmb1lRSVrgow9GCuafvsWWp1tjY6AcOHMh0GCIiAJztGeDIqW4On+7myOluDrV2c6i1i4HhUQAuXl7CdWuXcN1FS7hmzRIqiiMZidPMXnT3xkSfhaIlICKSSd39Qxw53cPhU7HKfuz13IXB8XXKixZx8fJSPnftajbWlXPt2iVUlaTnfj+ppCQgIgK4O+cvDPLG2Qs0n7nAsTM9HDndzZHTPZzo6BtfryiSy8XLS/nIpcu5eEUp65eXcvGKEpaW5M/pgG6qKAmISNZwd870DNByvpfj53t542wvb527wJtnL/DG2Qt09Q+PrxvJzWHt0mIa6yv47PI6LllRysXLS6kuLyQnTU/5yoRQJAENDIvITHX3D9Fyvo+W9l5azvcSbe8br/Rb2nvpHxodXzfHYFV5IfVLivnUlatYU1XC2qXFrFlSTG1lUdoe6TifaGBYREJjZNQ51zNAa2c/rZ39nOjo40R7Hyc6YpV9tL2Pzr6hCd8pyc+jtrKIuspCaiuKqFtSRG1FEbWVRdRWFpKfl54nds0nGhgWkXlvYHiEtq5YBX+qq59TnX2c6hzgVFcfpzr7OdXZT1v3AMOjE3+4FkVyWVVeSG1FIRvryqmpGKvkC6mpKKKiaFEo++rnipKAiKRdd/8Qp7tiv97HKvRYRf/2a/xMmzFFkVxWlhWwoqyA6y6qYkVZPivKClmxuICVZQVUlxdSrko+KRlNAmaWA/xXYDFwwN2/n8l4ROS9GR11zvcOTlmxj732DAy/47uVxRFWLI5V8FfUlo+/H6vgl5cVUJqfpwo+zWadBMzsYeBmoM3dL48r3wx8C8gFvufu35xmM1uBauA8sYfUi8g8MTQySlv3wKQKvo9TXQOc6uyjtbOftq4BBkdGJ3wvN8dYVprP8sUFrFtWwg3rqiZV8IUsW5xPwaKF3xcfBsm0BB4B7gceHSsws1zgAeAmYpX6fjPbTSwh7Jj0/TuA9cA+d/+OmT0BPJtEPCIyQ72Dw4l/uQfvWzv7OdszwOR5I/l5OePdM42rK4KumaCLpiz2C76qJD8rZtUsFMk8Y3ivmdVPKt4ENLl7M4CZPQZsdfcdxFoNE5hZFBjrCByZbSwzdeONN6Z7FyIZ5cBobgEj+aUMR0oYibz9OhIpYThSykiklNG8gnd8N2e4n9zBbvIGu8kd7GHxYDd5gz1BWQ+5A93kjPQDcCr4k7nz/PPPp2W7qR4TqAZa4pajwDXTrP8k8DdmdgOwN9EKZrYd2A5QV1eXojBFwscxRhYVBRX7xEp9OL+EkUWljOSX4DmTbkrmTu7QhVhl3t9BQVfL2xX7+GsPOaNDiXcsC1qqk0CiNuCUFyK4ey9w53QbdPedZtYKbIlEIlcnE1y6MqlIsvqHxqZH9r2ji6a1s5/TXbHpkSOTpkcuyjWWjw2kBq9js2dWBN02y0rzWZQbiifJSgakOglEgdq45RrgZIr3IRIqXf1DnA4q88kV+9jr+QTTI4sjuUE/eyEXXVQ13hcfX8FXFkUW1C0MZO6lOgnsB9aZ2RrgBLAN+GyyG9XjJWU+cne6+oY52dk3XrGPzZo5FTcnPtH0yCXFEZYvLmBVWQEb68pZuTg2JXJl2du/6ksLMn+veVn4kpkiugu4EagKBni/7u4PmdndwDPEZgQ97O6vJRuk7h0kcy2+gj/Z0TdeoY9V+GOV/tjDQsbkGCwrjf1Kv3h5bHrk2101hawsK2DZ4vysuFWBhIPuHSRZaXB4lFOd/UQ7ejnZ0U9rRx8nO/s40dEfq/Q7+rgwOLGCz80xlpfmj3fRjHXPrAymR64qL2BpST556n+XeSb09w5SS0Deq56B4Qk3Fou9j/2d7Oijrfudc+CrSiKx/velxdywropVZYWsKi9kZXkBq8oKWVqq+e+y8KglIKF0YWCYlvZeouf7iLa/fQfJaFDpd/ROnO4Yyc1hVXkB1RWF45V7dUUhNeWFrCyP/arXFayyUKklIKEzPDJKa2c/x4P7wI/9Rc/30tLe947ZNAWLcqipKKKmopArasrH31dXFFJTUUhVcb5m0YgkoJaAZEz/0AjHz/fy1rng6U7nLvDWuVhlf6K9b8Itg/NyjOqKQuoqi2K3Cg5uExxbLmRJcUQ3GhOZgloCkjGDw6McP987/vi+N+Ie5dfa2T9h3cUFeaxeUsz7qsu4+f0rWV1ZPP7gj5VlheqPF0kDtQQkae7OuQuDHGvr4diZCzSf6aH5bOxB3S3ne4m/yLWiaBH1VbHH961eUkx9VVHsdUkR5UWRzB2EyAIW+paAzA/uTmtnP0dOd9PU1sPR0z0cO9ND05meCQOxBYtyqF9SzOXVZWy9YhX1VcXUVxWztqpYFb3IPKMkIAl19A7y+qluXm/t4vDpHo6c7ubIqW66465+XVIc4aJlJXz88pU0LCuhYVkJFy0tZlVZoQZhRUIiFElAYwLpMzwyStOZHg61dvF6a3es4j/VxemugfF1ygoXsX5FKZ/eWM3Fy0tYt7yUi5eXUlmsX/UiYacxgSwyODzKkdPdvHqik4MnOjl4sovXW7sYGI49GSqSm0PDshIuWVHKJStLWb9iMZesKGVZab5m3oiEmMYEstDoqNN8toeXWzp5JdrBK9FOftPaxWBQ4ZcW5HH5qjI+f91qLltVxoZVi1lTVaxbDotkGSWBBaKzd4iXjrfz0vF2fnW8g19HO+juj/XfF0dyuay6jNuvW837a8p5f00ZdZVF+nUvIuFIAhoTeKfWzj5++cZ5XnjjPAfePM+R0z1A7CZn65eXsuWKVVxZW86VteVctLREc+xFJCGNCYREW3c/v2g6x75j59jXfI7j53sBKM3P46rVFXygvoKrVldwZW05RZFQ5HYRmSMaEwihvsER9jWf5V+OnuP/NZ3l8OluIHZV7TVrl3D79fVcs6aSS1cu1q98EZk1JYF5JNrey09/c5rnDp/hX5vPMTg8SiQvh031lXx6YzUfbKhiwypV+iKSOkoCGeTuHG3r4elXT/GPr53iUGsXAGuXFvO5a1bzoUuW8oH6St3iWETSJqNJwMxuAG4L4tjg7tdnMp65cuxMDz9++SQ/eeUkzWcuYAZX11XwtU9cwk0bVrCmqjjTIYpIlkjmGcMPAzcDbe5+eVz5ZuBbxJ4x/D13/+ZU23D3nwM/N7NPE3tI/YLVfmGQn7xykideOsGvWzowg2vXLOGL19fzsctWsGxxQaZDFJEslExL4BHgfuDRsQIzywUeAG4CosB+M9tNLCHsmPT9O9y9LXj/WeBLScQyL42MOj8/eobHD7Tw09+0MTgyyiUrSvmzT17KlitWsVwVv4hk2KyTgLvvNbP6ScWbgCZ3bwYws8eAre6+g1ir4R3MrA7odPeuKT7fDmwHqKurm224c6qjd5Af7W/hB//6FtH2PiqLI9x2bR23XF3DZavKMh2eiMi4VI8JVAMtcctR4Jp3+c6dwN9O9aG77wR2Quw6gWQDTKfWzj6+u/cNHtt/nN7BEa5ZU8l/2nwJH7tsBZE83Y5BROafVCeBRHMXp6243f3r77rReX7FcGtnH//zZ8f40f4WRtzZesUqvnTDWjasWpzp0EREppXqJBAFauOWa4CTKd7HvHG2Z4D7n2vihy8cZ9Sd32us5Ss3XkRtZVGmQxMRmZFUJ4H9wDozWwOcALYRG/RNirs/BTzV2Nh4V7LbSoWhkVG+/4s3+dZPj9I7NMItV9Vw94cbVPmLSOgkM0V0F3AjUGVmUeDr7v6Qmd0NPENsRtDD7v5askHOp+6gX7d0cM+Tr3KotYvfvngp//nmDTQsK8l0WCIis5LM7KBbpyjfA+yZdUTz1ODwKP/9nw6zc28zy0rzefBzV/Oxy5brdswiEmqhuG1EpruDjp/r5e5dL/FKtJNbN9XytU9cSmnBokyEIiKSUqFIApnsDnr+cBt/+MNfYQYPfu5qNl++Ys5jEBFJl1BMXnf3p9x9e1nZ3F5o9cMXjnPHI/uprSziH756gxKAiCw4oWgJzDV353/89Cj3PXuUD61fyv2fvYrifP1TicjCE4qWgJltMbOdnZ2dad+Xu/PNp1/nvmeP8m8ba/ju5xuVAERkwQpFEpjL7qDv7G3mO3ub+XfXrubPf/f95OWG4p9IRGRWVMPFefrVVr759Ovc/P6VfONTl2n6p4gseKFIAnPRHXT0dDd//PivuaqunL/8vSvI0SMcRSQLhCIJpLs7aGB4hK8+9jJFkVwe/NzVepyjiGQNjXgC9z/XxKHWLh66vVFP+BKRrBKKlkA6NbX18O3nj/GZjdX8zqXLMx2OiMicyvoksGPPIQoX5fK1T16a6VBEROZcKJJAugaGX3yrnWdfb+MrH2qgqiQ/pdsWEQmDUCSBdA0M79x7jPKiRdx+/eqUbldEJCxCkQTSoa2rn58eauP3G2spimh8XESyU9YmgccPtDAy6mzbVJfpUEREMiYrk8DoqLPrly1cf9ES1lQVZzocEZGMyWgSMLM6M9ttZg+b2T1ztd9fHDvHiY4+blUrQESy3KyTQFBxt5nZwUnlm83ssJk1zaBivxj4B3e/A9gw21jeq6cPtlIUyeWmDbouQESyWzItgUeAzfEFZpYLPAB8nFilfquZbTCz95nZTyb9LQN+BWwzs+eAnyURy4y5O/985Ay/1VCl20OISNabdRJw973A+UnFm4Amd29290HgMWCru7/q7jdP+msDvgh83d0/DHwy0X7MbLuZHTCzA2fOnJltuOOi7X1E2/v4YENV0tsSEQm7VI8JVAMtccvRoGwq/wh81cweBN5MtIK77wS+AbwUiUSSDvCl4+0ANNZXJL0tEZGwS/UE+UT3X/apVnb3g8At77ZRd38KeKqxsfGuJGIDYlcJF0dyWb+8NNlNiYiEXqpbAlGgNm65BjiZ7EZTeduIA2+2s7GuQk8MExEh9UlgP7DOzNaYWQTYBuxO8T5mrXdwmNdPdXFVXXmmQxERmReSmSK6C9gHrDezqJnd6e7DwN3AM8Ah4HF3fy3ZIFN176Cjp3sYddiwKv3PKhYRCYNZjwm4+61TlO8B9sw6ogTMbAuwpaGhIantHDndDcD6FRoPEBGBkNw2IlUtgTfOXiAvx6itKExRZCIi4RaKJJCqgeGW9j6qKwo1KCwiEghFbZiqlsDJjj5WlakVICIyJhRJIFVaO/pYWa4HyYuIjAlFEkhFd9DIqHO6e0AtARGROKFIAqnoDursG2Jk1KkqSf7WEyIiC0UokkAqnL8wCEBFsZKAiMiYUCSBVHQHtfcGSaBISUBEZEwokkAquoPag5ZApVoCIiLjQpEEUmG8JaAkICIyLouSwBAAFUWLMhyJiMj8kTVJoKN3iEhuDoV6pKSIyLhQJIFUDAz3DAxRWpCHWaLn3oiIZKdQJIFUDAz39A9TnJ/qB6mJiIRbKJJAKlwYHKEooq4gEZF4WZMEBoZHKVQSEBGZIHuSwNAI+XlZc7giIjOS0VrRzDaY2eNm9m0zuyWd+xoYHiWSp5aAiEi8ZJ4x/LCZtZnZwUnlm83ssJk1mdk977KZjwN/4+5/AHx+trHMxMDwqFoCIiKTJDNd5hHgfuDRsQIzywUeAG4CosB+M9sN5AI7Jn3/DuAHwNfN7FPAkiRieVcDw+oOEhGZLJkHze81s/pJxZuAJndvBjCzx4Ct7r4DuHmKTf37IHk8mehDM9sObAeoq6ubbbgMDI2Sr+4gEZEJUj1xvhpoiVuOAtdMtXKQRL4GFAN/kWgdd99pZq3AlkgkcvVsAxscGSWiloCIyASprhUTXY7rU63s7m+6+3Z3v83d/2Wa9ZK+WGx4ZJRFubpaWEQkXqqTQBSojVuuAU4mu9FU3DZieNTJzVESEBGJl+oksB9YZ2ZrzCwCbAN2p3gfszIy6uQpCYiITJDMFNFdwD5gvZlFzexOdx8G7gaeAQ4Bj7v7a8kGmZLuoFEnN0djAiIi8ZKZHXTrFOV7gD2zjigBM9sCbGloaJj1NtQSEBF5p1D8NE62JeDujGhMQETkHUKRBJIdGB4ejU1QUktARGSiUCSBZFsCI0ESyNUUURGRCUKRBJI11hJYpIFhEZEJQlErJtsdNDISSwI56g4SEZkgFEkg2e6gUQ+6g5QDREQmCEUSEBGR9AhFEki2O2jKmxeJiGS5UCSBVFwxDGCm/iARkXihSAIiIpIeWZEE3NUhJCKSSFYkgTHqDRIRmSgUSUADwyIi6RGKJJCygeEUxSMislCEIgmIiEh6ZEUS0LiwiEhiWZEExmlkWERkgjlLAma21sweMrMn4sqKzez7ZvZdM7stXft2DQ2LiCQ0oyRgZg+bWZuZHZxUvtnMDptZk5ndM9023L3Z3e+cVPwZ4Al3vwv41HuKfBbUDhARmWimzxh+BLgfeHSswMxygQeAm4AosN/MdgO5wI5J37/D3dsSbLcGeDV4PzLzsEVEJBVmlATcfa+Z1U8q3gQ0uXszgJk9Bmx19x3AzTPcf5RYIniZKVolZrYd2A5QV1c3w81Oot4gEZGEkhkTqAZa4pajQVlCZrbEzB4ENprZvUHxk8Dvmtm3gacSfc/ddwLfAF6KRCJJhKtxYRGRyWbaHZRIoip1yt/c7n4O+PKksgvAF5OIYUbUEBARSSyZlkAUqI1brgFOJhdOYqm7YlhNARGReMkkgf3AOjNbY2YRYBuwOzVhTZTsvYNERCSxmU4R3QXsA9abWdTM7nT3YeBu4BngEPC4u7+WjiCTbQnoimERkcRmOjvo1inK9wB7UhpRAma2BdjS0NCQ5HZSE4+IyEIRittGJN0S0NCwiEhCoUgCqRoTUENARGSiUCSBVM0OEhGRiUKRBJJ+sph6g0REEgpFEkjZdQLqDxIRmSAUSSBZagiIiCSWFUlgjK4YFhGZKBRJQFcMi4ikRyiSQPJXDKtDSEQkkVAkgZRRb5CIyARZkQTUEBARSSwrkoCIiCQWiiSg20aIiKRHKJKAbhshIpIeoUgCqWK6ZFhEZIKsSgIiIjLRnCUBM1trZg+Z2RPTlaWDZgeJiCQ208dLPmxmbWZ2cFL5ZjM7bGZNZnbPdNtw92Z3v/PdytJJnUEiIhPN6PGSwCPA/cCjYwVmlgs8ANwERIH9ZrYbyAV2TPr+He7elnS0s6Qni4mIJDbTZwzvNbP6ScWbgCZ3bwYws8eAre6+A7g5lUGmisaFRUQmSmZMoBpoiVuOBmUJmdkSM3sQ2Ghm905VluB7283sgJkdOHPmTBLhiojIZDPtDkok0e/qKftd3P0c8OV3K0vwvZ1m1gpsiUQiV88mUA0Mi4gklkxLIArUxi3XACeTCye91B0kIjJRMklgP7DOzNaYWQTYBuxOTVgTJX0r6RTHIyKyUMx0iuguYB+w3syiZnanuw8DdwPPAIeAx939tXQEmbp7B6kpICISb6azg26donwPsCelESXez1PAU42NjXele18iItkkFLeNSLYloCeLiYgkFookkKq7iGpgWERkolAkgaRbAimOR0RkoQhFEtDzBERE0iMUSSBVs4NERGSiUCSBpK8TUH+QiEhCoUgCqaIni4mITJQlSUBNARGRREKRBFJ3xbCIiMQLRRLQ7CARkfQIRRJIlgaGRUQSy4okMEbjwiIiE4UiCeiKYRGR9AhFEkjZvYM0NCwiMkEokoCIiKRHViQBDQyLiCSWFUlgjAaGRUQmmtMkYGZrzewhM3siruzTZvZdM/uxmX10LuMREcl2M04CZvawmbWZ2cFJ5ZvN7LCZNZnZPdNtw92b3f3OSWV/7+53AV8Afv89xD5jrvlBIiIJzegZw4FHgPuBR8cKzCwXeAC4CYgC+81sN5AL7Jj0/TvcvW2a7f9ZsK20UW+QiMhEM04C7r7XzOonFW8Cmty9GcDMHgO2uvsO4OaZbNdit/b8JvC0u7+U4PPtwHaAurq6mYY7KfZZfU1EZMFLdkygGmiJW44GZQmZ2RIzexDYaGb3BsV/CHwEuMXMvjz5O+6+090b3b1x6dKlSQWrgWERkYneS3dQIomq1Sl/d7v7OeDLk8ruA+6bdidmW4AtDQ0Ns4lRRESmkGxLIArUxi3XACeT3GbKqTtIRCSxZJPAfmCdma0xswiwDdidfFgTpe5W0uoPEhGJ916miO4C9gHrzSxqZne6+zBwN/AMcAh43N1fS3WQyd5ArrQgj0++byUrygpSHJmISLi9l9lBt05RvgfYk7KI0qC2sogHbrsq02GIiMw7obhthJ4sJiKSHqFIAql6xrCIiEwUiiSgloCISHqEIgmIiEh6hCIJqDtIRCQ9QpEE1B0kIpIeoUgCIiKSHqFIAuoOEhFJD/MQ3VjHzM4AbyWxiSrgbIrCmc90nAuLjnNhycRxrnb3hLdhDlUSSJaZHXD3xkzHkW46zoVFx7mwzLfjDEV3kIiIpIeSgIhIFsu2JLAz0wHMER3nwqLjXFjm1XFm1ZiAiIhMlG0tARERiaMkICKSxbIiCZjZZjM7bGZNZnZPpuOZipnVmtnPzOyQmb1mZv8hKK80s38ys6PBa0VQbmZ2X3Bcr5jZVXHbuj1Y/6iZ3R5XfrWZvRp85z4zs+n2kcZjzTWzX5nZT4LlNWb2QrD/HwWPK8XM8oPlpuDz+rht3BuUHzazj8WVJzzfU+0jzcdZbmZPmNnrwXm9boGezz8K/ps9aGa7zKxgIZxTM3vYzNrM7GBcWcbO33T7mDV3X9B/QC5wDFgLRIBfAxsyHdcUsa4ErgrelwJHgA3AfwPuCcrvAf48eP8J4GliD0++FnghKK8EmoPXiuB9RfDZL4Hrgu88DXw8KE+4jzQe6x8DPwR+Eiw/DmwL3j8I/EHw/ivAg8H7bcCPgvcbgnOZD6wJznHudOd7qn2k+Ti/D3wpeB8Byhfa+QSqgTeAwrh/5y8shHMK/BvgKuBgXFnGzt9U+0jqGNP9P0Gm/4J/4Gfilu8F7s10XDOM/cfATcBhYGVQthI4HLz/DnBr3PqHg89vBb4TV/6doGwl8Hpc+fh6U+0jTcdVAzwLfBj4SfAf9Fkgb/I5I/b86uuC93nBejb5PI6tN9X5nm4faTzOxcQqR5tUvtDOZzXQElRyecE5/dhCOadAPROTQMbO31T7SOb4sqE7aOw/0DHRoGxeC5rIG4EXgOXu3goQvC4LVpvq2KYrjyYoZ5p9pMNfA38CjAbLS4AOdx9OENf4sQSfdwbrv9djn24f6bIWOAP8rcW6vr5nZsUssPPp7ieAvwSOA63EztGLLMxzCpk9fymvz7IhCViCsnk9L9bMSoC/A/6ju3dNt2qCMp9F+Zwxs5uBNnd/Mb44war+Lp+F4djziHUlfNvdNwIXiDXtpxKGY3qHoL96K7EunFVAMfDxBKsuhHM6nbmIP+XHnA1JIArUxi3XACczFMu7MrNFxBLA/3b3J4Pi02a2Mvh8JdAWlE91bNOV1yQon24fqfZbwKfM7E3gMWJdQn8NlJtZXoK4xo8l+LwMOM97P/az0+wjXaJA1N1fCJafIJYUFtL5BPgI8Ia7n3H3IeBJ4HoW5jmFzJ6/lNdn2ZAE9gPrglkEEWIDUbszHFNCwcyAh26occQAAAFqSURBVIBD7v5XcR/tBsZmFNxObKxgrPzzwYyBa4HOoOn4DPBRM6sIfqV9lFhfaSvQbWbXBvv6/KRtJdpHSrn7ve5e4+71xM7Fc+5+G/Az4JYpjnEsrluC9T0o3xbMNFkDrCM2yJbwfAffmWofaeHup4AWM1sfFP0O8BsW0PkMHAeuNbOiII6x41xw5zRB/HN9/qbax+yla7BoPv0RG1E/QmyGwZ9mOp5p4vwgsabdK8DLwd8niPV9PgscDV4rg/UNeCA4rleBxrht3QE0BX9fjCtvBA4G37mft68aT7iPNB/vjbw9O2gtsf/hm4D/A+QH5QXBclPw+dq47/9pcByHCWZVTHe+p9pHmo/xSuBAcE7/ntjskAV3PoFvAK8HsfyA2Ayf0J9TYBexcY4hYr/C78zk+ZtuH7P9020jRESyWDZ0B4mIyBSUBEREspiSgIhIFlMSEBHJYkoCIiJZTElARCSLKQmIiGSx/w8fg/kiLJndZgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nqubits = 20\n",
    "state = QuantumState(nqubits)\n",
    "state.set_Haar_random_state()\n",
    "\n",
    "#確率分布を取得\n",
    "prob_dist = [abs(x)**2 for x in state.get_vector()]\n",
    "\n",
    "#小さい順に並べてプロット\n",
    "plt.plot(np.sort(prob_dist))\n",
    "plt.hlines(1/2**nqubits, 0, 2**nqubits)\n",
    "plt.yscale(\"log\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "一様分布 p(x) = 1/2^(nqubits) よりも高い確率で出現するビット列が存在。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ランダム量子回路\n",
    "n（偶数）量子ビットをランダムにペアに分けて、ランダムな2量子ビット演算を実行するような量子回路を構成しよう。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nqubits = 20\n",
    "depth = 1\n",
    "state = QuantumState(nqubits)\n",
    "random_circuit = QuantumCircuit(nqubits)\n",
    "\n",
    "qubit_index = [i for i in range(nqubits)]\n",
    "\n",
    "random_circuit_instance =[]\n",
    "\n",
    "for _ in range(depth):\n",
    "    #qubitのindexをランダムに置換する\n",
    "    random.shuffle(qubit_index)\n",
    "    for k in range(int(nqubits/2)):\n",
    "        #ランダムに選んだペアにランダム量子演算を作用\n",
    "        random_circuit_instance.append(RandomUnitary([qubit_index[k],qubit_index[k+1]]))\n",
    "\n",
    "#ゲートの総数\n",
    "gate_counts = len(random_circuit_instance)        \n",
    "\n",
    "#ゲートを追加\n",
    "for i in range(gate_counts):\n",
    "    random_circuit.add_gate(random_circuit_instance[i])\n",
    "\n",
    "#状態を更新\n",
    "random_circuit.update_quantum_state(state)\n",
    "\n",
    "#確率分布を取得\n",
    "prob_dist = [abs(x)**2 for x in state.get_vector()]\n",
    "\n",
    "#小さい順に並べてプロット\n",
    "plt.plot(np.sort(prob_dist))\n",
    "plt.hlines(1/2**nqubits, 0, 2**nqubits)\n",
    "plt.yscale(\"log\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "depthが浅いと全然ランダム量子回路の分布にならない。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_unitary_gate_set(nqubits,depth):\n",
    "    random_circuit_instance =[]\n",
    "    qubit_index = [i for i in range(nqubits)]\n",
    "\n",
    "    for _ in range(depth):\n",
    "        #qubitのindexをランダムに置換する\n",
    "        random.shuffle(qubit_index)\n",
    "        for k in range(int(nqubits/2)):\n",
    "            #ランダムに選んだペアにランダム量子演算を作用\n",
    "            random_circuit_instance.append(RandomUnitary([qubit_index[k],qubit_index[k+1]]))\n",
    "\n",
    "    return random_circuit_instance\n",
    "\n",
    "def random_circuit_sampling(nqubits,random_circuit_instance):\n",
    "    state = QuantumState(nqubits)\n",
    "    random_circuit = QuantumCircuit(nqubits)\n",
    "\n",
    "    #ゲートの総数\n",
    "    gate_counts = len(random_circuit_instance)        \n",
    "\n",
    "    #ゲートを追加\n",
    "    for i in range(gate_counts):\n",
    "        random_circuit.add_gate(random_circuit_instance[i])\n",
    "\n",
    "    #状態を更新\n",
    "    random_circuit.update_quantum_state(state)\n",
    "\n",
    "\n",
    "    #確率分布を取得\n",
    "    prob_dist = [abs(x)**2 for x in state.get_vector()]\n",
    "\n",
    "    #小さい順に並べてプロット\n",
    "    plt.plot(np.sort(prob_dist))\n",
    "    plt.hlines(1/2**nqubits, 0, 2**nqubits)\n",
    "    plt.yscale(\"log\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nqubits=20\n",
    "depth = 2\n",
    "random_circuit_sampling(nqubits,random_unitary_gate_set(nqubits,depth))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nqubits=20\n",
    "depth = 10\n",
    "random_circuit_sampling(nqubits,random_unitary_gate_set(nqubits,depth))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nqubits=20\n",
    "depth=20\n",
    "random_circuit_sampling(nqubits,random_unitary_gate_set(nqubits,depth))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Heavy Output を生成する"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def HeavyOutput(nqubits,random_circuit_instance):\n",
    "    state = QuantumState(nqubits)\n",
    "    random_circuit = QuantumCircuit(nqubits)\n",
    "\n",
    "    #ゲートの総数\n",
    "    gate_counts = len(random_circuit_instance)\n",
    "\n",
    "    #ゲートを追加\n",
    "    for i in range(gate_counts):\n",
    "        random_circuit.add_gate(random_circuit_instance[i])\n",
    "        \n",
    "\n",
    "    #状態を更新\n",
    "    random_circuit.update_quantum_state(state)\n",
    "\n",
    "\n",
    "    #確率分布を取得\n",
    "    prob_dist = [abs(x)**2 for x in state.get_vector()]\n",
    "    \n",
    "    #小さい順に並べて中央値を取り出す\n",
    "    p_median = np.sort(prob_dist)[2**(nqubits-1)-1]\n",
    "    \n",
    "    heavy_output = []\n",
    "    for i in range(2**nqubits):\n",
    "        #中央値よりも確率が高くなる側て結果を集める\n",
    "        if prob_dist[i] > p_median:\n",
    "            heavy_output.append(i)\n",
    "    return heavy_output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9204211145312936\n"
     ]
    }
   ],
   "source": [
    "nqubits = 2\n",
    "depth = 2\n",
    "random_circuit_instance = random_unitary_gate_set(nqubits,depth)\n",
    "\n",
    "state = QuantumState(nqubits)\n",
    "random_circuit = QuantumCircuit(nqubits)\n",
    "\n",
    "#ゲートの総数\n",
    "gate_counts = len(random_circuit_instance)\n",
    "\n",
    "#ゲートを追加\n",
    "for i in range(gate_counts):\n",
    "    random_circuit.add_gate(random_circuit_instance[i])\n",
    "\n",
    "#状態を更新\n",
    "random_circuit.update_quantum_state(state)\n",
    "\n",
    "\n",
    "#確率分布を取得\n",
    "prob_dist = [abs(x)**2 for x in state.get_vector()]\n",
    "#print(prob_dist)\n",
    "\n",
    "heavy_output = HeavyOutput(nqubits,random_circuit_instance)\n",
    "#print(heavy_output)\n",
    "\n",
    "heavy_prob = 0\n",
    "for i in heavy_output:\n",
    "    heavy_prob += prob_dist[i]\n",
    "\n",
    "print(heavy_prob)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "さて、n量子ビット、深さ d のランダム量子回路で、heavy outputを得る確率が2/3以上だった場合にタスクが成功するとする。このとき、量子ボリュームは、QV= max( 2^min(n,d)) で定義される。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 実際にサンプリングをして、heavy outputを得る確率を推定してみよう"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "理想的な量子回路の場合："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8579\n"
     ]
    }
   ],
   "source": [
    "nqubits = 10\n",
    "depth = nqubits\n",
    "shots =10000\n",
    "\n",
    "# random circuitのインスタンスを生成\n",
    "random_circuit = QuantumCircuit(nqubits)\n",
    "random_circuit_instance = random_unitary_gate_set(nqubits,depth)\n",
    "\n",
    "# heavy outputの計算\n",
    "heavy_output = HeavyOutput(nqubits,random_circuit_instance)\n",
    "\n",
    "#ゲートの総数\n",
    "gate_counts = len(random_circuit_instance)\n",
    "\n",
    "#ゲートを追加\n",
    "for i in range(gate_counts):\n",
    "    random_circuit.add_gate(random_circuit_instance[i])\n",
    "\n",
    "#状態を更新\n",
    "state = QuantumState(nqubits)\n",
    "random_circuit.update_quantum_state(state)\n",
    "\n",
    "#サンプリングを実行\n",
    "outcome = state.sampling(shots)\n",
    "\n",
    "counts = 0\n",
    "for i in outcome:\n",
    "    if i in heavy_output:\n",
    "        counts += 1\n",
    "estimated_heavy_prob = counts/shots    \n",
    "print(estimated_heavy_prob)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ノイズのある回路の場合："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 1000/1000 [02:09<00:00,  7.73it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.741\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "nqubits = 20\n",
    "depth = nqubits\n",
    "shots =1000\n",
    "error_prob = 0.001\n",
    "\n",
    "# random circuitのインスタンスを生成\n",
    "random_circuit_instance = random_unitary_gate_set(nqubits,depth)\n",
    "\n",
    "# heavy outputの計算\n",
    "heavy_output = HeavyOutput(nqubits,random_circuit_instance)\n",
    "\n",
    "#ゲートの総数\n",
    "gate_counts = len(random_circuit_instance)\n",
    "\n",
    "#1回のサンプリングをshots回繰り返す（ノイズのインスタンスが毎回かわるため）\n",
    "counts = 0\n",
    "\n",
    "for _ in tqdm.tqdm(range(shots)):\n",
    "    #ゲートを追加\n",
    "    random_circuit = QuantumCircuit(nqubits)\n",
    "    for i in range(gate_counts):\n",
    "        random_circuit.add_gate(random_circuit_instance[i])\n",
    "        \n",
    "        #各depthごとにdepolarizing noiseを挿入する\n",
    "        if i % int(nqubits/2) == 0:\n",
    "            for k in range(nqubits):\n",
    "                #１量子ビットのdepolarzingNoiseを作用させる\n",
    "                random_circuit.add_gate(DepolarizingNoise(k,error_prob))\n",
    "        \n",
    "\n",
    "    #状態を更新\n",
    "    state = QuantumState(nqubits)\n",
    "    random_circuit.update_quantum_state(state)\n",
    "\n",
    "    #サンプリングを実行\n",
    "    outcome = state.sampling(1)\n",
    "\n",
    "    if outcome[0] in heavy_output:\n",
    "        counts += 1\n",
    "\n",
    "estimated_heavy_prob = counts/shots    \n",
    "print(estimated_heavy_prob)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
